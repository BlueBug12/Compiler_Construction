/* Definition section */
%{
    #include <stdio.h>
    #include <stdbool.h>
    #include "common.h"
    #include "y.tab.h"	/* header file generated by bison */
    extern YYSTYPE yylval;

    #define YY_NO_UNPUT
    #define YY_NO_INPUT
%}

/* Define regular expression label */
letter [a-zA-Z_]
digit [0-9]
id {letter}+({letter}|{digit})*
inumber {digit}+
fnumber ({digit}*\.{digit}+)

%x CMT
%x STR
%option yylineno

/* Rules section */
%%

"/*"        { BEGIN(CMT); }
<CMT>"*/"   { BEGIN(INITIAL); }
<CMT>\n     {;}
<CMT>.      {;}
"//".*      {;}
"\""        { BEGIN(STR);
                return '"';
            }
<STR>"\""   { BEGIN(INITIAL);
                return '"';
            }
<STR>[^\"]* { yylval.string = strdup(yytext);
                return STRING_LIT;
            }
"+"         { printf("ADD\n");return ADD; }
"-"         { printf("SUB\n");return SUB; }
"*"         { printf("MUL\n");return MUL; }
"/"         { printf("QUO\n");return QUO; }
"%"         { printf("REM\n");return REM; }
"++"        { printf("INC\n");return INC; }
"--"        { printf("DEC\n");return DEC; }

">"         { return GTR; }
"<"         { return LSS; }
">="        { return GEQ; }
"<="        { return LEQ; }
"=="        { return EQL; }
"!="        { return NEQ; }

"="         { return ASSIGN; }
"+="        { return ADD_ASSIGN; }
"-="        { return SUB_ASSIGN; }
"*="        { return MUL_ASSIGN; }
"/="        { return QUO_ASSIGN; }
"%="        { return REM_ASSIGN; }

"&&"        { return LAND; }
"||"        { return LOR; }
"!"         { return NOT; }

"("         { return LPAREN; }
")"         { return RPAREN; }
"["         { return LBRACK; }
"]"         { return RBRACK; }
"{"         { return LBRACE; }
"}"         { return RBRACE; }

";"         { return SEMICOLON; }
","         { return COMMA; }
"\n"        { return NEWLINE; }

"print"     { return PRINT; }
"println"   { return PRINTLN; }
"if"        { return IF; }
"else"      { return ELSE; }
"for"       { return FOR; }

"int32"     { yylval.string="int32";return INT; }
"float32"   { yylval.string="floast32";return FLOAT;}
"string"    { yylval.string="string";return STRING; }
"bool"      { yylval.string="bool";return BOOL; }
"true"      { yylval.string="true";return TRUE;}
"false"     { yylval.string="false";return FALSE;}
"var"       { yylval.string="var";return VAR; }

{inumber}   { yylval.i_val = atoi(yytext);
                return INT_LIT;
            }
{fnumber}   { yylval.f_val = atof(yytext);return FLOAT_LIT; }
{id}        { yylval.string = strdup(yytext);return IDENT; }

<<EOF>>     { static int once = 0;
                if (once++) {
                    yyterminate();
                }
                yylineno++;
                return NEWLINE;
            }
[ \t]+      {;}
.           {;}
%%

/*  C Code section */
int yywrap(void)
{
    return 1;
}
